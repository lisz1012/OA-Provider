<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lisz.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.lisz.entity.Role">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>
  
  <insert id="addPermissionForRole">
    delete from role_permission where role_id = #{roleId};
  	insert into role_permission (role_id, permission_id) values (#{roleId}, #{permissionId});
  </insert>
  
  <insert id="addPermissionsForRole">
    delete from role_permission where role_id = #{roleId};
    insert into role_permission (role_id,permission_id) values 
    <foreach collection="permissionIds" item="permissionId" index="index" separator=","> <!-- 注意这里不能写open 和 close，否则有多余的一对括号，最后报错，column数对不上了 -->
    	(#{roleId},#{permissionId})
    </foreach>
  	<!-- 参见https://blog.csdn.net/windy2014s/article/details/78738004 -->
  </insert>
  
  <resultMap id="roleResultMap" type="com.lisz.entity.Role">
    <id column="rid" jdbcType="INTEGER" property="id" /> <!-- 起别名rid，避免id重名mybatis报错 -->
    <result column="rname" jdbcType="VARCHAR" property="name" />
    <collection property="permissions" ofType="com.lisz.entity.Permission"><!-- property设置在实体类中的成员名，ofType设置泛型<Permission> -->
    	<id column="pid" jdbcType="INTEGER" property="id" />
	    <result column="uri" jdbcType="VARCHAR" property="uri" />
	    <result column="permission_name" jdbcType="VARCHAR" property="name" />
	    <result column="c" jdbcType="BIT" property="c" />
	    <result column="r" jdbcType="BIT" property="r" />
	    <result column="u" jdbcType="BIT" property="u" />
	    <result column="d" jdbcType="BIT" property="d" />
    </collection>
  </resultMap>
  
  <select id="findById" resultMap="roleResultMap">
  	select r.id rid, r.name rname, p.id pid, p.name as permission_name, p.c, p.r, p.u, p.d, p.uri 
  		from role r join role_permission rp on (r.id = rp.role_id) join permission p on (rp.permission_id = p.id)
  		where r.id = #{id};
  </select>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`
  </sql>
  <select id="selectByExample" parameterType="com.lisz.mapper.RoleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lisz.mapper.RoleExample">
    delete from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lisz.entity.Role" useGeneratedKeys="true">
    insert into role (`name`)
    values (#{name,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.lisz.entity.Role" useGeneratedKeys="true">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lisz.mapper.RoleExample" resultType="java.lang.Long">
    select count(*) from role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update role
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update role
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lisz.entity.Role">
    update role
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lisz.entity.Role">
    update role
    set `name` = #{name,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>